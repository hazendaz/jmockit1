<!--
   JPA persistence configuration specific to the integration testing environment.
   This file goes into the "src/test" directory so that, when running tests, it overrides the "production" configuration file that would
   normally exist in the "src/main" directory.
-->
<persistence
   xmlns="https://jakarta.ee/xml/ns/persistence" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation="https://jakarta.ee/xml/ns/persistence https://jakarta.ee/xml/ns/persistence/persistence_3_2.xsd" version="3.2">

   <persistence-unit name="default">
      <class>petclinic.owners.Owner</class>
      <class>petclinic.owners.OwnerData</class>
      <class>petclinic.pets.Pet</class>
      <class>petclinic.pets.PetType</class>
      <class>petclinic.vets.Vet</class>
      <class>petclinic.vets.Specialty</class>
      <class>petclinic.visits.Visit</class>

      <properties>
         <!-- JDBC connection parameters -->
         <property name="jakarta.persistence.jdbc.driver" value="org.hsqldb.jdbcDriver"/>
         <property name="jakarta.persistence.jdbc.url" value="jdbc:hsqldb:mem:testDb"/>
         <property name="jakarta.persistence.jdbc.user" value="sa"/>
         <property name="jakarta.persistence.jdbc.password" value=""/>

         <!-- Hibernate-specific configuration -->
         <property name="hibernate.globally_quoted_identifiers" value="true"/>
         <property name="hibernate.hbm2ddl.auto" value="create"/>
         <property name="hibernate.show_sql" value="false"/>

         <!--
            The following properties cause an in-memory database to be created for every test run.
            In a real-world project, however, this is not recommended since real databases tend to be much larger;
            also, they typically don't have a single SQL creation script, but instead an open-ended list of incremental scripts which are
            manually updated as the database schema evolves over time.
            A more realistic approach is to use a development/test database, either running locally or in a shared server;
            normally, such a database would also be used for manual testing of the application.
         -->

         <!-- Schema generation -->
         <property name="jakarta.persistence.schema-generation.database.action" value="create"/>
      </properties>
   </persistence-unit>
</persistence>
